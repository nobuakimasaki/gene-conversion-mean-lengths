colnames(sim.obs.cnts) = "l"
sim.freq.singletons.M <- sum(sim.obs.cnts$l == 1)/nrow(sim.obs.cnts)
# comparing CDFs
# empirical CDF truncated between 2 and 1500 bp
sim.obs.cnts.df <- sim.obs.cnts %>% filter(l != 1) %>% group_by(l) %>% summarize(counts = n())
sim.obs.freq.df <- sim.obs.cnts.df
sim.obs.freq.df$freq <- sim.obs.freq.df$counts/sum(sim.obs.freq.df$counts)
sim.obs.freq.df$cdf.emp <- cumsum(sim.obs.freq.df$freq)
# CDF of L truncated between 2 and 1500 bp
exp.freq.2M.df <- get_exp_freq_2M(1, 1/300, 1500) %>% as.data.frame()
exp.freq.2M.df$l <- 2:1500
exp.freq.2M.df$cdf.exp <- cumsum(exp.freq.2M.df$.)
# joining the two dataframes
sim.freq.df <- left_join(exp.freq.2M.df, sim.obs.freq.df, by = "l") %>% select(l, cdf.exp, cdf.emp) %>% gather(2:3, key = "exp/emp", value = "cdf")
sim.freq.df$`exp/emp` <- forcats::fct_relevel(sim.freq.df$`exp/emp`, "cdf.exp", "cdf.emp")
# there are NA entries for the empirical CDF, because some observed tract lengths are not found
sim.freq.df$cdf <- na.locf(sim.freq.df$cdf)
# plotting the two CDFs
p1 <- ggplot(sim.freq.df %>% filter(`exp/emp` %in% c("cdf.exp", "cdf.emp")), aes(x = l, y = cdf, color = `exp/emp`)) + geom_line(size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density", x = expression("\u2113"), color = "") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0)) + ylim(0, 1.01) +
scale_color_manual(
values = c("cdf.exp" = "#000000", "cdf.emp" = "#E41A1C"),
labels = c(expression(F[2]^{1500} * "(" * "\u2113" ~ "|" ~ phi == 300 * ")"), expression(paste(widehat(F), ("\u2113"))))) +
scale_x_continuous(breaks = c(2, 500, 1000, 1500))
p1
ggsave("figs/cdf.p1.png", width = 12, height = 6)
### In this section, we compare the empirical CDF of observed tract lengths from the simulation without LD to the truncated CDF of L
# loading in observed tract lengths and psi_j values from this simulation
sim.tracts <- readRDS("res.geom.rds")
sim.tracts.l <- sim.tracts[[1]][[4]]
sim.tracts.psi <- sim.tracts[[1]][[5]]
# filter tracts
keep <- which(sim.tracts.l <= 1500)
sim.tracts.l <- sim.tracts.l[keep]
sim.tracts.psi <- sim.tracts.psi[keep]
# comparing freq. of singletons
# estimating the freq. of singletons using the model
sim.tracts.est.freq.singletons.M <- lapply(sim.tracts.psi, pL_geom_1M, 1, 1/300, 1500) %>% unlist() %>% mean()
# actual freq. of singletons
sim.tracts.obs.cnts <- as.data.frame(sim.tracts.l)
colnames(sim.tracts.obs.cnts) = "l"
sim.tracts.freq.singletons.M <- sum(sim.tracts.obs.cnts$l == 1)/nrow(sim.tracts.obs.cnts)
### This file is used to run the analyses in the Supplementary Materials
# load in packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
source('../main_sim/fns_sim.R')
# function to estimate the probability that an observed tract length is 1 bp
pL_geom_1M <- function(psi, l, phi, M) {
if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}
# probability mass function of L truncated between 2 and 1500 bp
get_exp_freq_2M <- function(psi, phi, M) {
density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
return(density)
}
# read coalescent simulation results
sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
# gather all of the observed tract lengths and psi_j values from the 20 regions
sim.0.5.l <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist()
sim.0.5.psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist()
# only keep observed tract lengths smaller than or equal to 1500 bp
keep <- which(sim.0.5.l <= 1500)
sim.0.5.l <- sim.0.5.l[keep]
sim.0.5.psi <- sim.0.5.psi[keep]
### In this section, we compare the empirical CDF of observed tract lengths from the coalescent simulation to the truncated CDF of L
# comparing freq. of singletons
# estimating the freq. of singletons using the model
sim.est.freq.singletons.M <- lapply(sim.0.5.psi, pL_geom_1M, 1, 1/300, 1500) %>% unlist() %>% mean()
# actual freq. of singletons
sim.obs.cnts <- as.data.frame(sim.0.5.l)
colnames(sim.obs.cnts) = "l"
sim.freq.singletons.M <- sum(sim.obs.cnts$l == 1)/nrow(sim.obs.cnts)
# comparing CDFs
# empirical CDF truncated between 2 and 1500 bp
sim.obs.cnts.df <- sim.obs.cnts %>% filter(l != 1) %>% group_by(l) %>% summarize(counts = n())
sim.obs.freq.df <- sim.obs.cnts.df
sim.obs.freq.df$freq <- sim.obs.freq.df$counts/sum(sim.obs.freq.df$counts)
sim.obs.freq.df$cdf.emp <- cumsum(sim.obs.freq.df$freq)
# CDF of L truncated between 2 and 1500 bp
exp.freq.2M.df <- get_exp_freq_2M(1, 1/300, 1500) %>% as.data.frame()
exp.freq.2M.df$l <- 2:1500
exp.freq.2M.df$cdf.exp <- cumsum(exp.freq.2M.df$.)
# joining the two dataframes
sim.freq.df <- left_join(exp.freq.2M.df, sim.obs.freq.df, by = "l") %>% select(l, cdf.exp, cdf.emp) %>% gather(2:3, key = "exp/emp", value = "cdf")
sim.freq.df$`exp/emp` <- forcats::fct_relevel(sim.freq.df$`exp/emp`, "cdf.exp", "cdf.emp")
# there are NA entries for the empirical CDF, because some observed tract lengths are not found
sim.freq.df$cdf <- na.locf(sim.freq.df$cdf)
# plotting the two CDFs
p1 <- ggplot(sim.freq.df %>% filter(`exp/emp` %in% c("cdf.exp", "cdf.emp")), aes(x = l, y = cdf, color = `exp/emp`)) + geom_line(size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density", x = expression("\u2113"), color = "") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0)) + ylim(0, 1.01) +
scale_color_manual(
values = c("cdf.exp" = "#000000", "cdf.emp" = "#E41A1C"),
labels = c(expression(F[2]^{1500} * "(" * "\u2113" ~ "|" ~ phi == 300 * ")"), expression(paste(widehat(F), ("\u2113"))))) +
scale_x_continuous(breaks = c(2, 500, 1000, 1500))
p1
ggsave("figs/cdf.p1.png", width = 12, height = 6)
### In this section, we compare the empirical CDF of observed tract lengths from the simulation without LD to the truncated CDF of L
# loading in observed tract lengths and psi_j values from this simulation
sim.tracts <- readRDS("res.geom.rds")
sim.tracts.l <- sim.tracts[[1]][[4]]
sim.tracts.psi <- sim.tracts[[1]][[5]]
# filter tracts
keep <- which(sim.tracts.l <= 1500)
sim.tracts.l <- sim.tracts.l[keep]
sim.tracts.psi <- sim.tracts.psi[keep]
# comparing freq. of singletons
# estimating the freq. of singletons using the model
sim.tracts.est.freq.singletons.M <- lapply(sim.tracts.psi, pL_geom_1M, 1, 1/300, 1500) %>% unlist() %>% mean()
# actual freq. of singletons
sim.tracts.obs.cnts <- as.data.frame(sim.tracts.l)
colnames(sim.tracts.obs.cnts) = "l"
sim.tracts.freq.singletons.M <- sum(sim.tracts.obs.cnts$l == 1)/nrow(sim.tracts.obs.cnts)
# comparing CDFs
# empirical CDF truncated between 2 and 1500 bp
sim.tracts.obs.cnts.df <- sim.tracts.obs.cnts %>% filter(l != 1) %>% group_by(l) %>% summarize(counts = n())
sim.tracts.obs.freq.df <- sim.tracts.obs.cnts.df
sim.tracts.obs.freq.df$freq <- sim.tracts.obs.freq.df$counts/sum(sim.tracts.obs.freq.df$counts)
sim.tracts.obs.freq.df$cdf.emp <- cumsum(sim.tracts.obs.freq.df$freq)
# joining the two dataframes
sim.tracts.freq.df <- left_join(exp.freq.2M.df, sim.tracts.obs.freq.df, by = "l") %>% select(l, cdf.exp, cdf.emp) %>% gather(2:3, key = "exp/emp", value = "cdf")
sim.tracts.freq.df$`exp/emp` <- forcats::fct_relevel(sim.tracts.freq.df$`exp/emp`, "cdf.exp", "cdf.emp")
# there are NA entries for the empirical CDF, because some observed tract lengths are not found
sim.tracts.freq.df$cdf <- na.locf(sim.tracts.freq.df$cdf)
# plotting the two CDFs
p2 <- ggplot(sim.tracts.freq.df %>% filter(`exp/emp` %in% c("cdf.exp", "cdf.emp")), aes(x = l, y = cdf, color = `exp/emp`)) + geom_line(size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density", x = expression("\u2113"), color = "") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0)) + ylim(0, 1.01) +
scale_color_manual(
values = c("cdf.exp" = "#000000", "cdf.emp" = "#E41A1C"),
labels = c(expression(F[2]^{1500} * "(" * "\u2113" ~ "|" ~ phi == 300 * ")"), expression(paste(widehat(F), ("\u2113"))))) +
scale_x_continuous(breaks = c(2, 500, 1000, 1500))
p2
ggsave("figs/cdf.p2.png", width = 12, height = 6)
# #?. empirical CDF in main simulation is equal to empirical CDF when simulating from the vcf file
#   # - observed tracts are detected correctly
#
# sim.vcf <- read.csv("../sim_vcf/sim_tracts_vcf_5000000.csv")
# sim.vcf <- sim.vcf %>% filter(X0 <= 1500)
# sim.vcf.df <- sim.vcf %>% group_by(X0) %>% summarize(count = n())
# sim.vcf.df <- sim.vcf.df[-1,]
# sim.vcf.df$freq <- sim.vcf.df$count/sum(sim.vcf.df$count)
# sim.vcf.df$cdf <- cumsum(sim.vcf.df$freq)
# sim.vcf.df$l <- sim.vcf.df$X0
# sim.vcf.df$analysis <- "vcf"
# sim.vcf.df <- select(sim.vcf.df, l, analysis, cdf)
#
# sim.obs.freq.df.full <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
# sim.obs.freq.df.full$freq <- sim.obs.freq.df.full$counts/sum(sim.obs.freq.df.full$counts)
# sim.obs.freq.df.full$cdf <- cumsum(sim.obs.freq.df.full$freq)
# sim.obs.freq.df.full$analysis <- "coalescent"
# sim.obs.freq.df.full <- sim.obs.freq.df.full %>% select(l, analysis, cdf)
#
# sim.vcf.df <- rbind(sim.obs.freq.df.full, sim.vcf.df)
#
# sim.vcf.df$cdf <- na.locf(sim.vcf.df$cdf)
#
# p3 <- ggplot(sim.vcf.df %>% filter(analysis %in% c("coalescent", "vcf")), aes(x = l, y = cdf, color = analysis)) + geom_line(size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density", x = expression("\u2113"), color = "") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1.01) +
#   scale_color_manual(
#   values = c("coalescent" = "#E41A1C", "vcf" = "#377EB8"),
#   labels = c(expression(paste(widehat(F)^{multiIBD}, ("\u2113"))), expression(paste(widehat(F)^{individuals}, ("\u2113"))))) +
#   scale_x_continuous(breaks = c(1, 500, 1000, 1500))
#
# p3
#
# ggsave("cdf.p3.png", width = 9, height = 6)
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
### This file is used to analyze the results from the coalescent simulation
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyr)
### Read in file with estimates
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("est.")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("Geometric", 20), rep("Sum of geometric", 20))
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate (bp)", color = NULL) + scale_color_manual(values = c("Geometric" = "#E41A1C", "Sum of geometric" = "#377EB8"))
ggsave("figs/est.sim.png", width = 7, height = 4)
### organize psi list
# psi.list <- lapply(res.sim, function(x) {x[[3]]})
# psi.sim <- psi.list[1:20] %>% unlist()
# psi.sim2 <- psi.list[21:40] %>% unlist()
# psi.sim.keep <- psi.list[41:60] %>% unlist()
# psi.sim2.keep <- psi.list[61:80] %>% unlist()
# psi.df <- cbind(psi.sim, psi.sim2, psi.sim.keep, psi.sim2.keep)
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
### filter geom and keep
res.sim.CI.geom <- res.sim.CI %>% filter(model == "Geometric")
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
length(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300)
length(which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300))
### list of negative log likelihoods
lik.list.geom <- lapply(res.sim, function(x) {x[[1]][[2]]}) %>% unlist()
lik.list.geom2 <- lapply(res.sim, function(x) {x[[2]][[2]]}) %>% unlist()
AIC.geom <- 2 + 2*lik.list.geom
AIC.geom2 <- 2 + 2*lik.list.geom2
### calculate AIC
res.sim.CI$AIC <- c(AIC.geom, AIC.geom2)
AIC.geom - AIC.geom2
quantile(AIC.geom - AIC.geom2)
# ### UK Biobank results (ends are kept, but ran using both distributions)
# res.UK <- readRDS("res.UK_Biobank.1M.1500.region.5000.geom.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
#
# ### point estimate
# res.UK.phi <- 1/res.UK[[1]]$par
#
# ### bootstrapped estimates
# boot.UK.res.list <- res.UK[[4]]
# boot.UK.phi.inv <- lapply(boot.UK.res.list, function(x) {x[[1]][[1]]}) %>% unlist()
# boot.UK.phi <- 1/boot.UK.phi.inv
#
# res.UK.phi
# boot.UK.phi %>% unlist() %>% quantile(probs = c(0.025, 0.975))
# res.UK2 <- readRDS("res.UK_Biobank.1M.1500.region.5000.geom2.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
#
# ### point estimate
# res.UK2.phi <- 2/res.UK2[[1]]$par
#
# ### bootstrapped estimates
# boot.UK2.res.list <- res.UK2[[4]]
# boot.UK2.phi.inv <- lapply(boot.UK2.res.list, function(x) {x[[1]][[1]]}) %>% unlist()
# boot.UK2.phi <- 2/boot.UK2.phi.inv
#
# res.UK2.phi
# boot.UK2.phi %>% unlist() %>% quantile(probs = c(0.025, 0.975))
res.sim[[1]][[1]]
### This file takes in the recombination rates file and assigns recombination hotspots. We also analyze the results from fitting our model on tracts detected from the UK Biobank whole autosome data.
library(ggplot2)
library(dplyr)
recomb_rates <- readRDS("res_recombination_rates.rds")
get_hotspots <- function(chr) {
recomb_rates.chr <- recomb_rates[[chr]][[1]]
background.rate <- recomb_rates[[chr]][[2]]
recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
# Add a grouping column to identify consecutive TRUE/FALSE sequences
recomb_rates.chr <- recomb_rates.chr %>%
mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
recomb.hotspots.chr <- recomb_rates.chr %>%
group_by(group_id) %>%
summarize(
first_marker = min(V2),
last_marker = max(V3),
first_pos = min(V4),
last_pos = max(V5),
hotspot = first(hotspot)) %>%
select(-group_id)
recomb.hotspots.chr$length <- recomb.hotspots.chr$last_pos - recomb.hotspots.chr$first_pos + 1
recomb.hotspots.chr$chr <- chr
return(recomb.hotspots.chr)
}
hotspots.chrs <- lapply(1:22, get_hotspots)
saveRDS(hotspots.chrs, "hotspots.RDS")
hotspots.chrs.combined <- do.call(rbind, hotspots.chrs)
### Results from fitting separately on both subsets of tracts
1/res.hotspot[[1]][[1]]
### This file takes in the recombination rates file and assigns recombination hotspots. We also analyze the results from fitting our model on tracts detected from the UK Biobank whole autosome data.
library(ggplot2)
library(dplyr)
recomb_rates <- readRDS("res_recombination_rates.rds")
get_hotspots <- function(chr) {
recomb_rates.chr <- recomb_rates[[chr]][[1]]
background.rate <- recomb_rates[[chr]][[2]]
recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
# Add a grouping column to identify consecutive TRUE/FALSE sequences
recomb_rates.chr <- recomb_rates.chr %>%
mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
recomb.hotspots.chr <- recomb_rates.chr %>%
group_by(group_id) %>%
summarize(
first_marker = min(V2),
last_marker = max(V3),
first_pos = min(V4),
last_pos = max(V5),
hotspot = first(hotspot)) %>%
select(-group_id)
recomb.hotspots.chr$length <- recomb.hotspots.chr$last_pos - recomb.hotspots.chr$first_pos + 1
recomb.hotspots.chr$chr <- chr
return(recomb.hotspots.chr)
}
hotspots.chrs <- lapply(1:22, get_hotspots)
saveRDS(hotspots.chrs, "hotspots.RDS")
hotspots.chrs.combined <- do.call(rbind, hotspots.chrs)
### testing code
# chr <- 2
#
# recomb_rates.chr <- recomb_rates[[chr]][[1]]
# background.rate <- recomb_rates[[chr]][[2]]
#
# recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
#
# # Add a grouping column to identify consecutive TRUE/FALSE sequences
# recomb_rates.chr <- recomb_rates.chr %>%
# mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
# hotspots.chrs[[1]]
### Supplementary figure 1
hotspots.chrs.combined.only.hotspots <- hotspots.chrs.combined %>% filter(hotspot == TRUE)
hotspots.chrs.combined.only.hotspots %>% filter(length == max(length))
hotspots.chr21 <- hotspots.chrs.combined %>% filter(chr == 21)
hotspots.chr21$hotspot.int <- ifelse(hotspots.chr21$hotspot, "0", "1")
recomb.rates.chr21 <- recomb_rates[[21]][[1]]
background.chr21 <- recomb_rates[[21]][[2]]
hotspots.chr21.filt <- hotspots.chr21 %>% filter(last_pos/10^6 < 14.5 & first_pos/10^6 > 14.4)
recomb.rates.chr21.filt <- recomb.rates.chr21 %>% filter(V5/10^6 < 14.5 & V4/10^6 > 14.4)
ggplot(hotspots.chr21.filt) +
geom_rect(aes(xmin = first_pos/10^6, xmax = last_pos/10^6, ymin = 5*background.chr21 - 1, ymax = 5*background.chr21 + 1, fill = hotspot.int), alpha = 0.5) +
geom_point(data = recomb.rates.chr21.filt, aes(x = center/10^6, y = V1), size = 0.3) +
labs(x = "Position (Mb)", y = "Recombination rate (cM/Mb)") +
geom_hline(yintercept = 5*background.chr21) +
scale_fill_manual(values = c("0" = "#E41A1C", "1" = "transparent"),
labels = c("0" = "Hotspot", "1" = ""),
name = "") +
xlim(14.4, 14.5) +
theme_bw()
ggsave("../figs/Fig2.png", width = 7, height = 4)
### Getting results file from fitting model on tracts detected from the UK Biobank whole autosome data
res.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.hotspot.rds")
res.not.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.not.hotspot.rds")
res <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
### Results from fitting on all tracts
1/res[[1]][[1]]
2/res[[2]][[1]]
AIC.geom <- 2 + 2*res[[1]][[2]]
AIC.geom2 <- 2 + 2*res[[2]][[2]]
AIC.geom - AIC.geom2
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
### Results from fitting separately on both subsets of tracts
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
quantile(lapply(res.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
2 + 2*res.hotspot[[1]][[2]]
2 + 2*res.hotspot[[2]][[2]]
2 + 2*res.not.hotspot[[1]][[2]]
2 + 2*res.not.hotspot[[2]][[2]]
### This file takes in the recombination rates file and assigns recombination hotspots. We also analyze the results from fitting our model on tracts detected from the UK Biobank whole autosome data.
library(ggplot2)
library(dplyr)
recomb_rates <- readRDS("res_recombination_rates.rds")
get_hotspots <- function(chr) {
recomb_rates.chr <- recomb_rates[[chr]][[1]]
background.rate <- recomb_rates[[chr]][[2]]
recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
# Add a grouping column to identify consecutive TRUE/FALSE sequences
recomb_rates.chr <- recomb_rates.chr %>%
mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
recomb.hotspots.chr <- recomb_rates.chr %>%
group_by(group_id) %>%
summarize(
first_marker = min(V2),
last_marker = max(V3),
first_pos = min(V4),
last_pos = max(V5),
hotspot = first(hotspot)) %>%
select(-group_id)
recomb.hotspots.chr$length <- recomb.hotspots.chr$last_pos - recomb.hotspots.chr$first_pos + 1
recomb.hotspots.chr$chr <- chr
return(recomb.hotspots.chr)
}
hotspots.chrs <- lapply(1:22, get_hotspots)
saveRDS(hotspots.chrs, "hotspots.RDS")
hotspots.chrs.combined <- do.call(rbind, hotspots.chrs)
### Getting results file from fitting model on tracts detected from the UK Biobank whole autosome data
res.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.hotspot.rds")
res.not.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.not.hotspot.rds")
res <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
### Results from fitting on all tracts
1/res[[1]][[1]]
2/res[[2]][[1]]
AIC.geom <- 2 + 2*res[[1]][[2]]
AIC.geom2 <- 2 + 2*res[[2]][[2]]
AIC.geom - AIC.geom2
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
2/res[[2]][[1]]
### Results from fitting separately on both subsets of tracts
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
quantile(lapply(res.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
2 + 2*res.hotspot[[1]][[2]]
2 + 2*res.hotspot[[2]][[2]]
2 + 2*res.not.hotspot[[1]][[2]]
2 + 2*res.not.hotspot[[2]][[2]]
### Getting results file from fitting model on tracts detected from the UK Biobank whole autosome data
res.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.hotspot.rds")
res.not.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.not.hotspot.rds")
res <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
### Results from fitting on all tracts
1/res[[1]][[1]]
2/res[[2]][[1]]
AIC.geom <- 2 + 2*res[[1]][[2]]
AIC.geom2 <- 2 + 2*res[[2]][[2]]
AIC.geom - AIC.geom2
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
### This file is used to analyze the results from fitting the model on tracts generated from individuals in the coalescent simulation.
library(dplyr)
geom.res <- readRDS("res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
### This file is used to analyze the results from fitting the model on tracts generated from individuals in the coalescent simulation.
library(dplyr)
geom.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
geom2.res <- readRDS("res.sim.2M.1500.region.5000.geom2.MAF.0.5.boot.keep.ends.rds")
### This file is used to analyze the results from fitting the model on tracts generated from individuals in the coalescent simulation.
library(dplyr)
geom.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
geom2.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.geom2.MAF.0.5.boot.keep.ends.rds")
geom3.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.geom3.MAF.0.5.boot.keep.ends.rds")
unif.1.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.2.res <- readRDS("model_fitting/res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.res <- c(unif.1.res, unif.2.res)
### Getting point estimates
geom.pnt.geom <- lapply(geom.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom2.pnt.geom <- lapply(geom2.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom3.pnt.geom <- lapply(geom3.res, function(x) {x[[1]][[1]]}) %>% unlist()
unif.pnt.geom <- lapply(unif.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom.pnt.geom2 <- lapply(geom.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom2.pnt.geom2 <- lapply(geom2.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom3.pnt.geom2 <- lapply(geom3.res, function(x) {x[[2]][[1]]}) %>% unlist()
unif.pnt.geom2 <- lapply(unif.res, function(x) {x[[2]][[1]]}) %>% unlist()
### geometric model
mean(1/geom.pnt.geom) - 300
mean(1/geom2.pnt.geom) - 300
mean(1/geom3.pnt.geom) - 300
mean(1/unif.pnt.geom) - 300
### geometric 2 model
mean(2/geom.pnt.geom2) - 300
mean(2/geom2.pnt.geom2) - 300
mean(2/geom3.pnt.geom2) - 300
mean(2/unif.pnt.geom2) - 300
### geometric model
sd(1/geom.pnt.geom)
sd(1/geom2.pnt.geom)
sd(1/geom3.pnt.geom)
sd(1/unif.pnt.geom)
### geometric 2 model
sd(2/geom.pnt.geom2)
sd(2/geom2.pnt.geom2)
sd(2/geom3.pnt.geom2)
sd(2/unif.pnt.geom2)
### Getting AIC selected estimates
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.pnt.AIC <- ifelse(geom.lik.geom < geom.lik.geom2, 1/geom.pnt.geom, 2/geom.pnt.geom2)
geom2.pnt.AIC <- ifelse(geom2.lik.geom < geom2.lik.geom2, 1/geom2.pnt.geom, 2/geom2.pnt.geom2)
geom3.pnt.AIC <- ifelse(geom3.lik.geom < geom3.lik.geom2, 1/geom3.pnt.geom, 2/geom3.pnt.geom2)
unif.pnt.AIC <- ifelse(unif.lik.geom < unif.lik.geom2, 1/unif.pnt.geom, 2/unif.pnt.geom2)
### bias and sample sd for AIC selected model
mean(geom.pnt.AIC) - 300
mean(geom2.pnt.AIC) - 300
mean(geom3.pnt.AIC) - 300
mean(unif.pnt.AIC) - 300
sd(geom.pnt.AIC)
sd(geom2.pnt.AIC)
sd(geom3.pnt.AIC)
sd(unif.pnt.AIC)
### Getting bootstrap confidence intervals
geom.boot <- lapply(geom.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom2.boot <- lapply(geom2.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom3.boot <- lapply(geom3.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
unif.boot <- lapply(unif.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
### Getting coverage for bootstrap CIs
geom.coverage <- lapply(geom.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
geom2.coverage <- lapply(geom2.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
geom3.coverage <- lapply(geom3.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
unif.coverage <- lapply(unif.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
apply(geom.coverage, 2, mean)
apply(geom.coverage, 2, sum)
apply(geom2.coverage, 2, mean)
apply(geom2.coverage, 2, sum)
apply(geom3.coverage, 2, mean)
apply(geom3.coverage, 2, sum)
apply(unif.coverage, 2, mean)
apply(unif.coverage, 2, sum)
