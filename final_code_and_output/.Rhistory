# Calculate the PMF for the sum of two geometric random variables (Negative Binomial with size = 2)
pmf_sum_geom <- dnbinom(x, size = 2, prob = prob_sum_geom)
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geo = pmf_geo,
pmf_uniform = pmf_uniform,
pmf_sum_geom = pmf_sum_geom)
# Plot the PMF using ggplot2
ggplot(data) +
geom_bar(aes(x = x, y = pmf_nb), stat = "identity", fill = "blue", width = 0.8, alpha = 0.5, show.legend = TRUE) +
geom_line(aes(x = x, y = pmf_geo, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_sum_geom, color = "Sum of Two Geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "PMF of Negative Binomial, Geometric, Uniform, and Sum of Two Geometric Distributions",
x = "Number of Failures", y = "Probability") +
scale_color_manual(values = c("red", "green", "purple")) +
theme_minimal() +
theme(legend.title = element_blank())
pmf_geom <- dgeom(x, prob = 1/300)
3*(1-3/303)/(3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
# Load the necessary library
library(ggplot2)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
View(data)
# Load the necessary library
library(ggplot2)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
# Load the necessary library
library(ggplot2)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb), color = "Negative binomial") +
geom_line(aes(x = x, y = pmf_geo, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_sum_geom, color = "Sum of two geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "PMF of Negative binomial, geometric, uniform, and sum of two geometric random variables",
x = "Number of Failures", y = "Probability") +
scale_color_manual(values = c("red", "green", "purple")) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial")) +
geom_line(aes(x = x, y = pmf_geo, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_sum_geom, color = "Sum of two geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "PMF of Negative binomial, geometric, uniform, and sum of two geometric random variables",
x = "Number of Failures", y = "Probability") +
scale_color_manual(values = c("red", "green", "purple")) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial")) +
geom_line(aes(x = x, y = pmf_geo, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_sum_geom, color = "Sum of two geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "PMF of Negative binomial, geometric, uniform, and sum of two geometric random variables",
x = "Number of Failures", y = "Probability") +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
theme_minimal() +
theme(legend.title = element_blank())
# Load the necessary library
library(ggplot2)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial")) +
geom_line(aes(x = x, y = pmf_geo, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_sum_geom, color = "Sum of two geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "Density of four distributions",
x = "n", y = "probability") +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
theme_minimal() +
theme(legend.title = element_blank())
# Load the necessary libraries
library(ggplot2)
library(dplyr)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
pmf_geom2[2] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
# Define a color blind-friendly palette
color_palette <- c("Negative binomial" = "#E69F00",
"Geometric" = "#56B4E9",
"Uniform" = "#009E73",
"Sum of two geometric" = "#F0E442")
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), linetype = "dashed", size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), linetype = "dotdash", size = 1.2) +
labs(title = "Density of Four Distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of Four Distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
theme_minimal() +
theme(legend.title = element_blank())
# Load the necessary libraries
library(ggplot2)
library(dplyr)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_nb <- dnbinom(x, size = 3, prob = 3/303)
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
pmf_geom2[2] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_nb = pmf_nb,
pmf_geom = pmf_geom,
pmf_uniform = pmf_uniform,
pmf_geom2 = pmf_geom2)
# Define a color blind-friendly palette
color_palette <- c("Negative binomial" = "#E69F00",
"Geometric" = "#56B4E9",
"Uniform" = "#009E73",
"Sum of two geometric" = "#F0E442")
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of Four Distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, 1500), breaks = seq(1, 1500, by = 100)) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(100, 1500, by = 100)) +  # Start at 1 and set breaks
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of Four Distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(100, 1500, by = 100))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of Four Distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "Probability") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
ggsave("pmf.png")
ggsave("pmf.png", width = 7, height = 5)
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_nb, color = "Negative binomial"), size = 1) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "P(N=n)") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
ggsave("pmf.png", width = 7, height = 5)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates <- readRDS("res_recombination_rates.rds")
View(recomb_rates)
library(ggplot2)
recomb_rates.chr1 <- recomb_rates[[1]]
View(recomb_rates.chr1)
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point() + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw()
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw()
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw()
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
genetic_map1 <- read_map_file("1")
View(genetic_map1)
mean1 <- (max(genetic_map1$V4) - min(genetic_map1$V4))/((max(genetic_map1$V3) - min(genetic_map1$V3)))
mean1 <- (max(genetic_map1$V4) - min(genetic_map1$V4))/((max(genetic_map1$V3)/10^6 - min(genetic_map1$V3)/10^6))
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = mean1)
mean1 <- ((max(genetic_map1$V3) - min(genetic_map1$V3))/(max(genetic_map1$V4) - min(genetic_map1$V4))
mean1 <- (max(genetic_map1$V3) - min(genetic_map1$V3))/(max(genetic_map1$V4) - min(genetic_map1$V4))
mean1 <- (max(genetic_map1$V3) - min(genetic_map1$V3))/(max(genetic_map1$V4) - min(genetic_map1$V4))
mean1 <- (max(genetic_map1$V3) - min(genetic_map1$V3))/(max(genetic_map1$V4) - min(genetic_map1$V4))*10^6
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = mean1)
mean1 <- (genetic_map1$V3[nrow(genetic_map1)] - genetic_map1$V3[1])/(genetic_map1$V4[nrow(genetic_map1)] - genetic_map1$V4[1])*10^6
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = mean1)
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 10*mean1, color = "red")
sum(recomb_rates.chr1$V1 > 10*mean1)
sum(recomb_rates.chr1$V1 > 5*mean1)
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
source("~/.active-rstudio-document", echo=TRUE)
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
source("~/.active-rstudio-document", echo=TRUE)
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "position", y = "recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "position", y = "log 10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
sum(recomb_rates.chr1$V1 > 5*mean1)
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
sum(recomb_rates.chr1$V1 > 5*mean1)
sum(recomb_rates.chr1$V1 > 5*mean1)
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
sum(recomb_rates.chr1$V1 > 5*mean1)
library(ggplot2)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates.chr1 <- recomb_rates[[1]]
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
genetic_map1 <- read_map_file("1")
mean1 <- (genetic_map1$V3[nrow(genetic_map1)] - genetic_map1$V3[1])/(genetic_map1$V4[nrow(genetic_map1)] - genetic_map1$V4[1])*10^6
genetic_map1 <- read_map_file("1")
mean1 <- (genetic_map1$V3[nrow(genetic_map1)] - genetic_map1$V3[1])/(genetic_map1$V4[nrow(genetic_map1)] - genetic_map1$V4[1])*10^6
ggsave("p1.png")
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggsave("p1.png")
library(dplyr)
calc_cM_per_bp <- function(df) {
first_row <- 1
n <- nrow(df)
results <- list()
j <- 0
# Loop through each row
while (j < n & first_row < n) {
# Loop to find the next row that is at least 2000 (2 kb) apart
for (j in (first_row + 1):n) {
# Check if the distance is at least 2000
if (df$V4[j] - df$V4[first_row] >= 2000) {
# Calculate the difference in V3 divided by the difference in V4
result <- (df$V3[j] - df$V3[first_row]) / (df$V4[j]/10^6 - df$V4[first_row]/10^6)
# Store the result
results[[length(results) + 1]] <- c(result, first_row, j, df$V4[first_row], df$V4[j])
first_row <- j
break
}
}
}
res.df <- results %>% unlist() %>% matrix(byrow = TRUE, ncol = 5) %>% as.data.frame()
res.df$center <- (res.df$V4 + res.df$V5)/2
background.rate <- (df$V3[nrow(df)] - df$V3[1]) / (df$V4[nrow(df)]/10^6 - df$V4[1]/10^6)
return(list(res.df, background.rate))
}
# read_map_file <- function(chr) {
#   str = paste0("/projects/browning/maps/decode.2019.b38/decode2019.chrchr", chr,
#                ".GRCh38.map")
#   df <- read.table(str)
#   return(df)
# }
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
map_list <- list()
for (i in 1:22) {
# Construct the chromosome name as a string
chr_name <- paste0("chr", i, ".map")
# Read the map file and store it in the list
map_list[[chr_name]] <- read_map_file(as.character(i))
}
setwd("hotspots")
library(dplyr)
calc_cM_per_bp <- function(df) {
first_row <- 1
n <- nrow(df)
results <- list()
j <- 0
# Loop through each row
while (j < n & first_row < n) {
# Loop to find the next row that is at least 2000 (2 kb) apart
for (j in (first_row + 1):n) {
# Check if the distance is at least 2000
if (df$V4[j] - df$V4[first_row] >= 2000) {
# Calculate the difference in V3 divided by the difference in V4
result <- (df$V3[j] - df$V3[first_row]) / (df$V4[j]/10^6 - df$V4[first_row]/10^6)
# Store the result
results[[length(results) + 1]] <- c(result, first_row, j, df$V4[first_row], df$V4[j])
first_row <- j
break
}
}
}
res.df <- results %>% unlist() %>% matrix(byrow = TRUE, ncol = 5) %>% as.data.frame()
res.df$center <- (res.df$V4 + res.df$V5)/2
background.rate <- (df$V3[nrow(df)] - df$V3[1]) / (df$V4[nrow(df)]/10^6 - df$V4[1]/10^6)
return(list(res.df, background.rate))
}
# read_map_file <- function(chr) {
#   str = paste0("/projects/browning/maps/decode.2019.b38/decode2019.chrchr", chr,
#                ".GRCh38.map")
#   df <- read.table(str)
#   return(df)
# }
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
map_list <- list()
for (i in 1:22) {
# Construct the chromosome name as a string
chr_name <- paste0("chr", i, ".map")
# Read the map file and store it in the list
map_list[[chr_name]] <- read_map_file(as.character(i))
}
res <- lapply(map_list, calc_cM_per_bp)
saveRDS(res, "res_recombination_rates.rds")
#print(head(res[[1]]))
#ggplot(res.df, aes(center, V1)) + geom_point()
print(head(res[[1]][[1]]))
library(ggplot2)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates.chr1 <- recomb_rates[[1]]
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
genetic_map1 <- read_map_file("1")
mean1 <- (genetic_map1$V3[nrow(genetic_map1)] - genetic_map1$V3[1])/(genetic_map1$V4[nrow(genetic_map1)] - genetic_map1$V4[1])*10^6
genetic_map1 <- read_map_file("1")
mean1 <- (genetic_map1$V3[nrow(genetic_map1)] - genetic_map1$V3[1])/(genetic_map1$V4[nrow(genetic_map1)] - genetic_map1$V4[1])*10^6
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
library(ggplot2)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates.chr1 <- recomb_rates[[1]][[1]]
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
library(ggplot2)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates.chr1 <- recomb_rates[[1]][[1]]
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggsave("p1.png")
sum(recomb_rates.chr1$V1 > 5*mean1)
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggsave("p1.png")
sum(recomb_rates.chr1$V1 > 5*mean1)
recomb_rates.chr1
View(recomb_rates.chr1)
mean1 <- recomb_rates.chr1[[1]][[2]]
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggsave("p1.png")
sum(recomb_rates.chr1$V1 > 5*mean1)
mean1
library(ggplot2)
recomb_rates <- readRDS("res_recombination_rates.rds")
recomb_rates.chr1 <- recomb_rates[[1]][[1]]
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr,
".GRCh38.map")
df <- read.table(str)
return(df)
}
mean1 <- recomb_rates[[1]][[2]]
ggplot(recomb_rates.chr1, aes(center, V1)) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = 5*mean1, color = "red")
ggplot(recomb_rates.chr1, aes(center, log10(V1))) + geom_point(size = 0.3) + labs(x = "Position", y = "log10 recomb. rate (cM/Mb)") + theme_bw() + geom_hline(yintercept = log10(5*mean1), color = "red")
ggsave("p1.png")
sum(recomb_rates.chr1$V1 > 5*mean1)
sum(recomb_rates.chr1$V1 > 5*mean1)
5*mean1
