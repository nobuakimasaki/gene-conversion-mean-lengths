library(dplyr)
source('../main_sim/fns_sim.R')
pL_geom_1M <- function(l, psi, phi, M) {
if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}
get_exp_freq_1M <- function(psi, phi, M) {
density <- lapply(1:1500, pL_geom_1M, psi, phi, M) %>% unlist()
return(density)
}
get_exp_freq_2M <- function(psi, phi, M) {
density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
return(density)
}
sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
tracts <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist()
sim.tracts <- readRDS("../sim_tracts/res.geom.rds")
sim.tracts.l <- lapply(sim.tracts, function(x) {return(x[[4]])}) %>% unlist()
sim.tracts.psi <- lapply(sim.tracts, function(x){return(x[[5]])}) %>% unlist()
### General outline for LD section
#1. expected CDF not equal to empirical CDF in main simulation
#2. empirical CDF in main simulation is equal to empirical CDF when simulating from the vcf file
#3. expected CDF is equal to empirical CDF when simulating tracts without LD
#4. truncated expected CDF is equal to truncated empirical CDF in main simulation
#1
# expected CDF in main simulation
sim.exp.freq.1M <- lapply(psi, get_exp_freq_1M, 1/300, 1500)
sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
library(dplyr)
source('../main_sim/fns_sim.R')
pL_geom_1M <- function(l, psi, phi, M) {
if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}
get_exp_freq_1M <- function(psi, phi, M) {
density <- lapply(1:1500, pL_geom_1M, psi, phi, M) %>% unlist()
return(density)
}
get_exp_freq_2M <- function(psi, phi, M) {
density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
return(density)
}
sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
sim.0.5.l <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist()
sim.0.5.psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist()
sim.tracts <- readRDS("../sim_tracts/res.geom.rds")
sim.tracts.l <- lapply(sim.tracts, function(x) {return(x[[4]])}) %>% unlist()
sim.tracts.psi <- lapply(sim.tracts, function(x){return(x[[5]])}) %>% unlist()
#1
# expected CDF in main simulation
sim.exp.freq.1M <- lapply(sim.0.5.psi, get_exp_freq_1M, 1/300, 1500)
sim.exp.freq.1M.matrix <- sim.exp.freq.1M %>% unlist() %>% matrix(ncol = 1500, byrow = TRUE)
sim.exp.freq.df <- colSums(sim.exp.freq.1M.matrix) %>% as.data.frame()
sim.exp.freq.df$l <- 1:1500
sim.exp.freq.df$freq <- sim.exp.freq.df$./sum(sim.exp.freq.df$.)
sim.obs.cnts <- as.data.frame(sim.0.5.l) %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.0.5.l)
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
sim.obs.freq.df <- sim.obs.cnts.df
sim.obs.freq.df$freq <- sim.obs.freq.df$counts/sum(sim.obs.freq.df$counts)
View(sim.exp.freq.df)
View(sim.obs.freq.df)
sim.exp.freq.df$cdf <- cumsum(exp.cnts.df$freq)
sim.exp.freq.df$cdf <- cumsum(sim.exp.freq.df$freq)
sim.obs.freq.df$cdf <- cumsum(sim.obs.freq.df$freq)
p1 <- ggplot(sim.obs.freq.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = sim.exp.freq.df, color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1) + geom_text(aes(x = 50, y = 0.93), label = "F(l)", color = "#E41A1C", alpha = 0.5, size = 5) + geom_text(aes(x = 50, y = 0.77), label = expression(paste(widehat(F)^sim, (l))), color = "#000000", alpha = 0.5, size = 5)
library(ggplot2)
p1 <- ggplot(sim.obs.freq.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = sim.exp.freq.df, color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1) + geom_text(aes(x = 50, y = 0.93), label = "F(l)", color = "#E41A1C", alpha = 0.5, size = 5) + geom_text(aes(x = 50, y = 0.77), label = expression(paste(widehat(F)^sim, (l))), color = "#000000", alpha = 0.5, size = 5)
p1
keep <- which(sim.0.5.l <= 1500)
library(dplyr)
library(ggplot2)
source('../main_sim/fns_sim.R')
pL_geom_1M <- function(l, psi, phi, M) {
if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}
get_exp_freq_1M <- function(psi, phi, M) {
density <- lapply(1:1500, pL_geom_1M, psi, phi, M) %>% unlist()
return(density)
}
get_exp_freq_2M <- function(psi, phi, M) {
density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
return(density)
}
sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
sim.0.5.l <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist()
sim.0.5.psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist()
keep <- which(sim.0.5.l <= 1500)
sim.0.5 <- sim.0.5[keep]
sim.0.5.l <- sim.0.5.l[keep]
sim.0.5.psi <- sim.0.5.psi[keep]
sim.tracts <- readRDS("../sim_tracts/res.geom.rds")
sim.tracts.l <- lapply(sim.tracts, function(x) {return(x[[4]])}) %>% unlist()
sim.tracts.psi <- lapply(sim.tracts, function(x){return(x[[5]])}) %>% unlist()
#1
# expected CDF in main simulation
sim.exp.freq.1M <- lapply(sim.0.5.psi, get_exp_freq_1M, 1/300, 1500)
sim.exp.freq.1M.matrix <- sim.exp.freq.1M %>% unlist() %>% matrix(ncol = 1500, byrow = TRUE)
sim.exp.freq.df <- colSums(sim.exp.freq.1M.matrix) %>% as.data.frame()
sim.exp.freq.df$l <- 1:1500
sim.exp.freq.df$freq <- sim.exp.freq.df$./sum(sim.exp.freq.df$.)
sim.obs.cnts <- as.data.frame(sim.0.5.l)
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
sim.obs.freq.df <- sim.obs.cnts.df
sim.obs.freq.df$freq <- sim.obs.freq.df$counts/sum(sim.obs.freq.df$counts)
sim.exp.freq.df$cdf <- cumsum(sim.exp.freq.df$freq)
sim.obs.freq.df$cdf <- cumsum(sim.obs.freq.df$freq)
p1 <- ggplot(sim.obs.freq.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = sim.exp.freq.df, color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1) + geom_text(aes(x = 50, y = 0.93), label = "F(l)", color = "#E41A1C", alpha = 0.5, size = 5) + geom_text(aes(x = 50, y = 0.77), label = expression(paste(widehat(F)^sim, (l))), color = "#000000", alpha = 0.5, size = 5)
p1
library(dplyr)
library(ggplot2)
source('../main_sim/fns_sim.R')
pL_geom_1M <- function(l, psi, phi, M) {
if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}
get_exp_freq_1M <- function(psi, phi, M) {
density <- lapply(1:1500, pL_geom_1M, psi, phi, M) %>% unlist()
return(density)
}
get_exp_freq_2M <- function(psi, phi, M) {
density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
return(density)
}
sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
sim.0.5.l <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist()
sim.0.5.psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist()
keep <- which(sim.0.5.l <= 1500)
sim.0.5.l <- sim.0.5.l[keep]
sim.0.5.psi <- sim.0.5.psi[keep]
sim.tracts <- readRDS("../sim_tracts/res.geom.rds")
sim.tracts.l <- lapply(sim.tracts, function(x) {return(x[[4]])}) %>% unlist()
sim.tracts.psi <- lapply(sim.tracts, function(x){return(x[[5]])}) %>% unlist()
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyr)
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
### point estimates are scaled differently for the two distributions
par.list1 <- 1/par.list[1:40]
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est <- c(est.geom, est.geom2)
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est <- c(est.geom, est.geom2)
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
View(boot.res.list)
boot.res.1 <- boot.res.list[[1]]
boot.res.1[[1]]
boot.res.1.unlist <- boot.res.1 %>% unlist()
boot.res.1.unlist
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975)))}
CI.list <- lapply(boot.res.list, get_CI)
CI.list
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.list <- lapply(boot.res.list, get_CI)
CI.list
unlist(CI.list)
CI.list <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE)
CI.list
CI.list <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower 95 geom", "upper 95 geom", "lower 95 geom2", "upper 95 geom2")
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
View(res.sim.CI)
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2) %>% as.data.frame()
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2) %>% as.data.frame()
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower 95 geom", "upper 95 geom", "lower 95 geom2", "upper 95 geom2")
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
res.sim.CI$index <- rep(1:20, 4)
res.sim.CI$index <- rep(1:20)
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2) %>% as.data.frame()
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower 95 geom", "upper 95 geom", "lower 95 geom2", "upper 95 geom2")
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
colnames(res.sim.CI) <- c("est", "upper 95", "lower 95")
res.sim.CI$index <- rep(1:20)
res.sim.CI$index <- 1:20
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2) %>% as.data.frame()
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower 95 geom", "upper 95 geom", "lower 95 geom2", "upper 95 geom2")
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
res.sim.CI$index <- 1:20
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% matrix(ncol = 2) %>% as.data.frame()
colnames(est.df) <- c("est. geom", "est. geom2")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 4, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower 95 geom", "upper 95 geom", "lower 95 geom2", "upper 95 geom2")
### combine point estimates and CI
res.sim.CI <- cbind(est.df, CI.df)
res.sim.CI$index <- 1:20
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("point est.")
View(est.df)
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
View(CI.df)
colnames(CI.df) <- c("lower 95", "upper 95")
CI.df.geom <- CI.df[seq(1,39,2)]
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
View(new.CI.df)
res.sim.CI$index <- rep(1:20, 2)
res.sim.CI$index <- rep(c(1:20), 2)
rep(c(1:20), 2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("est.")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("geom", 20), rep("geom2", 20))
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate", title = "Estimated mean gene conversion length from simulation study", color = "Distribution", shape = "Keep both ends")
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate", title = "Estimated mean gene conversion length from simulation study", color = "Analysis")
ggsave("est.sim.png", width = 7, height = 4)
### mean estimate for all settings
res.sim.CI %>% group_by(dist, keep) %>% summarize(mean_est = mean(est))
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est))
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
### filter geom and keep
res.sim.CI.geom <- res.sim.CI %>% filter(model == "geom")
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate", title = "Estimated mean gene conversion length from simulation study", color = "Analysis") + scale_color_manual(values = c("geom" = "#E41A1C", geom2 = "#377EB8"))
ggsave("est.sim.png", width = 7, height = 4)
### list of negative log likelihoods
lik.list.geom <- lapply(res.sim, function(x) {x[[1]][[2]]}) %>% unlist()
lik.list.geom2 <- lapply(res.sim, function(x) {x[[2]][[2]]}) %>% unlist()
### calculate AIC
res.sim.CI$AIC <- c(2 + 2*lik.list.geom, 2 + 2*lik.list.geom2)
lik.list.geom <- lapply(res.sim, function(x) {x[[1]][[2]]}) %>% unlist()
lik.list.geom2 <- lapply(res.sim, function(x) {x[[2]][[2]]}) %>% unlist()
AIC.geom <- 2 + 2*lik.list.geom
AIC.geom2 <- 2 + 2*lik.list.geom2
### calculate AIC
res.sim.CI$AIC <- c(AIC.geom, AIC.geom2)
res.sim.CI.geom <- res.sim.CI.filt[1:20,]
res.sim.CI.geom <- res.sim.CI[1:20,]
res.sim.CI.geom2 <- res.sim.CI[21:40,]
res.sim.CI.geom <- res.sim.CI[1:20,]$AIC
res.sim.CI.geom2 <- res.sim.CI[21:40,]$AIC
### calculate AIC
res.sim.CI$AIC <- c(AIC.geom, AIC.geom2)
AIC.geom - AIC.geom2
quantile(AIC.geom - AIC.geom2)
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
### filter geom and keep
res.sim.CI.geom <- res.sim.CI %>% filter(model == "geom")
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
len(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
length(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
### filter geom and keep
res.sim.CI.geom <- res.sim.CI %>% filter(model == "geom")
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
length(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300)
length(which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300))
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("est.")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("Geometric", 20), rep("Sum of Geometric", 20))
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyr)
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("est.")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("Geometric", 20), rep("Sum of Geometric", 20))
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate", title = "Estimated mean gene conversion length from simulation study", color = "Analysis") + scale_color_manual(values = c("Geometric" = "#E41A1C", "Sum of Geometric" = "#377EB8"))
ggsave("est.sim.png", width = 7, height = 4)
