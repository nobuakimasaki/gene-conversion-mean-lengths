### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("Geometric", 20), rep("Sum of Geometric", 20))
ggplot(res.sim.CI, aes(x = index, y = est., color = model)) + geom_point() + geom_errorbar(aes(ymin = lower.95, ymax = upper.95)) + geom_hline(yintercept = 300, linetype  = 2, alpha = 0.5) + ylim(0, 500) + theme_bw() + labs(x = "Replicate", y = "Estimate (bp)", title = "Estimated mean gene conversion length from simulation study", color = "Analysis") + scale_color_manual(values = c("Geometric" = "#E41A1C", "Sum of Geometric" = "#377EB8"))
ggsave("figs/est.sim.png", width = 7, height = 4)
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyr)
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyr)
res.sim <- readRDS("res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
### point estimates
par.list <- lapply(res.sim, function(x) {x[[1]][[1]]}) %>% unlist()
par.list2 <- lapply(res.sim, function(x) {x[[2]][[1]]}) %>% unlist()
### point estimates are scaled differently for the two distributions
est.geom <- 1/par.list
est.geom2 <- 2/par.list2
est.df <- c(est.geom, est.geom2) %>% as.data.frame()
colnames(est.df) <- c("est.")
### bootstrapped estimates
boot.res.list <- lapply(res.sim, function(x) {x[[5]]})
### get quantiles of raw estimates
get_CI <- function(x) {x %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% apply(2, function(y) quantile(y, probs = c(0.025, 0.975))) %>% unlist()}
CI.df <- lapply(boot.res.list, get_CI) %>% unlist() %>% matrix(ncol = 2, byrow = TRUE) %>% as.data.frame()
colnames(CI.df) <- c("lower.95", "upper.95")
CI.df.geom <- CI.df[seq(1,39,2),]
CI.df.geom2 <- CI.df[seq(2,40,2),]
new.CI.df <- rbind(CI.df.geom, CI.df.geom2)
### combine point estimates and CI
res.sim.CI <- cbind(est.df, new.CI.df)
res.sim.CI$index <- rep(c(1:20), 2)
res.sim.CI$model <- c(rep("Geometric", 20), rep("Sum of Geometric", 20))
View(res.sim.CI)
### mean estimate for all settings
res.sim.CI %>% group_by(model) %>% summarize(mean_est = mean(est.))
which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300)
length(which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300))
which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300)
length(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
### filter geom and keep
res.sim.CI.geom <- res.sim.CI %>% filter(model == "Geometric")
### look at how many contained the true value
which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300)
length(which(res.sim.CI.geom$lower.95 <= 300 & res.sim.CI.geom$upper.95 >= 300))
which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300)
length(which(res.sim.CI$lower.95 <= 300 & res.sim.CI$upper.95 >= 300))
### list of negative log likelihoods
lik.list.geom <- lapply(res.sim, function(x) {x[[1]][[2]]}) %>% unlist()
lik.list.geom2 <- lapply(res.sim, function(x) {x[[2]][[2]]}) %>% unlist()
AIC.geom <- 2 + 2*lik.list.geom
AIC.geom2 <- 2 + 2*lik.list.geom2
### calculate AIC
res.sim.CI$AIC <- c(AIC.geom, AIC.geom2)
AIC.geom - AIC.geom2
quantile(AIC.geom - AIC.geom2)
library(ggplot2)
library(dplyr)
recomb_rates <- readRDS("res_recombination_rates.rds")
get_hotspots <- function(chr) {
recomb_rates.chr <- recomb_rates[[chr]][[1]]
background.rate <- recomb_rates[[chr]][[2]]
recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
# Add a grouping column to identify consecutive TRUE/FALSE sequences
recomb_rates.chr <- recomb_rates.chr %>%
mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
recomb.hotspots.chr <- recomb_rates.chr %>%
group_by(group_id) %>%
summarize(
first_marker = min(V2),
last_marker = max(V3),
first_pos = min(V4),
last_pos = max(V5),
hotspot = first(hotspot)) %>%
select(-group_id)
recomb.hotspots.chr$length <- recomb.hotspots.chr$last_pos - recomb.hotspots.chr$first_pos + 1
recomb.hotspots.chr$chr <- chr
return(recomb.hotspots.chr)
}
hotspots.chrs <- lapply(1:22, get_hotspots)
saveRDS(hotspots.chrs, "hotspots.RDS")
hotspots.chrs.combined <- do.call(rbind, hotspots.chrs)
res.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.hotspot.rds")
res.not.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.not.hotspot.rds")
res <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
res.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.hotspot.rds")
res.not.hotspot <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.not.hotspot.rds")
res <- readRDS("../res.UK_Biobank.1M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.grouped.keep.ends.rds")
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
1/res[[1]][[1]]
2/res[[2]][[1]]
res.hotspot[[1]][[2]]
AIC.geom <- 2 + 2*res.hotspot[[1]][[2]]
AIC.geom2 <- 2 + 2*res.hotspot[[2]][[2]]
AIC.geom - AIC.geom2
AIC.geom <- 2 + 2*res[[1]][[2]]
AIC.geom2 <- 2 + 2*res[[2]][[2]]
AIC.geom - AIC.geom2
quantile(lapply(res[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
res[[5]]
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
AIC.geom <- 2 + 2*res[[1]][[2]]
AIC.geom2 <- 2 + 2*res[[2]][[2]]
AIC.geom - AIC.geom2
1/res[[1]][[1]]
2/res[[2]][[1]]
lapply(res[[5]], function(x) {x[[1]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
lapply(res[[5]], function(x) {x[[2]]}) %>% unlist() %>% quantile(probs = c(0.025, 0.975))
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
quantile(lapply(res.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
2 + 2*res.hotspot[[1]][[2]]
2 + 2*res.hotspot[[2]][[2]]
2 + 2*res.not.hotspot[[1]][[2]]
2 + 2*res.not.hotspot[[2]][[2]]
2 + 2*res.hotspot[[1]][[2]]
2 + 2*res.hotspot[[2]][[2]]
2 + 2*res.not.hotspot[[1]][[2]]
2 + 2*res.not.hotspot[[2]][[2]]
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
quantile(lapply(res.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[1]]}) %>% unlist(), probs = c(0.025, 0.975))
quantile(lapply(res.not.hotspot[[5]], function(x) {x[[2]]}) %>% unlist(), probs = c(0.025, 0.975))
1/res.hotspot[[1]][[1]]
2/res.hotspot[[2]][[1]]
1/res.not.hotspot[[1]][[1]]
2/res.not.hotspot[[2]][[1]]
hotspots.chrs.combined.only.hotspots <- hotspots.chrs.combined %>% filter(hotspot == TRUE)
hotspots.chrs.combined.only.hotspots %>% filter(length == max(length))
hotspots.chr21 <- hotspots.chrs.combined %>% filter(chr == 21)
hotspots.chr21
recomb.rates.chr21 <- recomb_rates[[21]][[1]]
background.chr21 <- recomb_rates[[21]][[2]]
recomb.rates.chr21$hotspot <- recomb.rates.chr21$V1 > 5*background.chr21
ggplot(hotspots.chr21 %>% filter(hotspot == TRUE)) +
geom_rect(aes(xmin = first_pos/10^6, xmax = last_pos/10^6, ymin = log(5*background.chr21)-0.5, ymax = log(5*background.chr21)+0.5), fill = "#E41A1C", color = "#E41A1C", size = 0.1) +
geom_point(data = recomb.rates.chr21, aes(x = center/10^6, y = log(V1)), size = 0.3, alpha = 0.4) +
labs(x = "Position (Mb)", y = "Logged recombination rate (cM/Mb)", title = "Recombination hotspots on chromosome 21") +
geom_hline(yintercept = log(5*background.chr21)) +
theme_bw()
ggsave("../figs/Fig2.png", width = 7, height = 4)
background.chr21
background.chr21*5
hotspots.chrs.combined.only.hotspots <- hotspots.chrs.combined %>% filter(hotspot == TRUE)
library(ggplot2)
library(dplyr)
recomb_rates <- readRDS("res_recombination_rates.rds")
get_hotspots <- function(chr) {
recomb_rates.chr <- recomb_rates[[chr]][[1]]
background.rate <- recomb_rates[[chr]][[2]]
recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
# Add a grouping column to identify consecutive TRUE/FALSE sequences
recomb_rates.chr <- recomb_rates.chr %>%
mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
recomb.hotspots.chr <- recomb_rates.chr %>%
group_by(group_id) %>%
summarize(
first_marker = min(V2),
last_marker = max(V3),
first_pos = min(V4),
last_pos = max(V5),
hotspot = first(hotspot)) %>%
select(-group_id)
recomb.hotspots.chr$length <- recomb.hotspots.chr$last_pos - recomb.hotspots.chr$first_pos + 1
recomb.hotspots.chr$chr <- chr
return(recomb.hotspots.chr)
}
hotspots.chrs <- lapply(1:22, get_hotspots)
saveRDS(hotspots.chrs, "hotspots.RDS")
hotspots.chrs.combined <- do.call(rbind, hotspots.chrs)
### testing code
# chr <- 2
#
# recomb_rates.chr <- recomb_rates[[chr]][[1]]
# background.rate <- recomb_rates[[chr]][[2]]
#
# recomb_rates.chr$hotspot <- recomb_rates.chr$V1 > 5*background.rate
#
# # Add a grouping column to identify consecutive TRUE/FALSE sequences
# recomb_rates.chr <- recomb_rates.chr %>%
# mutate(group_id = cumsum(hotspot != lag(hotspot, default = first(hotspot))))
# hotspots.chrs[[1]]
hotspots.chrs.combined.only.hotspots <- hotspots.chrs.combined %>% filter(hotspot == TRUE)
hotspots.chrs.combined.only.hotspots %>% filter(length == max(length))
hotspots.chr21 <- hotspots.chrs.combined %>% filter(chr == 21)
hotspots.chr21
recomb.rates.chr21 <- recomb_rates[[21]][[1]]
background.chr21 <- recomb_rates[[21]][[2]]
recomb.rates.chr21$hotspot <- recomb.rates.chr21$V1 > 5*background.chr21
ggplot(hotspots.chr21 %>% filter(hotspot == TRUE)) +
geom_rect(aes(xmin = first_pos/10^6, xmax = last_pos/10^6, ymin = log(5*background.chr21)-0.5, ymax = log(5*background.chr21)+0.5), fill = "#E41A1C", color = "#E41A1C", size = 0.1) +
geom_point(data = recomb.rates.chr21, aes(x = center/10^6, y = log(V1)), size = 0.3, alpha = 0.4) +
labs(x = "Position (Mb)", y = "Logged recombination rate (cM/Mb)", title = "Recombination hotspots on chromosome 21") +
geom_hline(yintercept = log(5*background.chr21)) +
theme_bw()
ggsave("../figs/Fig2.png", width = 7, height = 4)
View(hotspots.chrs.combined.only.hotspots)
hotspots.chrs.combined.only.hotspots %>% filter(length == max(length))
ggplot(hotspots.chr21 %>% filter(hotspot == TRUE)) +
geom_rect(aes(xmin = first_pos/10^6, xmax = last_pos/10^6, ymin = log(5*background.chr21)-0.5, ymax = log(5*background.chr21)+0.5), fill = "#E41A1C", color = "#E41A1C", size = 0.1) +
geom_point(data = recomb.rates.chr21, aes(x = center/10^6, y = log(V1)), size = 0.3, alpha = 0.4) +
labs(x = "Position (Mb)", y = "Logged recombination rate (cM/Mb)", title = "Recombination hotspots on chromosome 21") +
geom_hline(yintercept = log(5*background.chr21)) +
theme_bw()
library(dplyr)
geom.res <- readRDS("res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
geom2.res <- readRDS("res.sim.2M.1500.region.5000.geom2.MAF.0.5.boot.keep.ends.rds")
geom3.res <- readRDS("res.sim.2M.1500.region.5000.geom3.MAF.0.5.boot.keep.ends.rds")
unif.1.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.2.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.res <- c(unif.1.res, unif.2.res)
library(dplyr)
geom.res <- readRDS("res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
geom2.res <- readRDS("res.sim.2M.1500.region.5000.geom2.MAF.0.5.boot.keep.ends.rds")
geom3.res <- readRDS("res.sim.2M.1500.region.5000.geom3.MAF.0.5.boot.keep.ends.rds")
unif.1.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.2.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.res <- c(unif.1.res, unif.2.res)
geom.pnt.geom <- lapply(geom.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom2.pnt.geom <- lapply(geom2.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom3.pnt.geom <- lapply(geom3.res, function(x) {x[[1]][[1]]}) %>% unlist()
unif.pnt.geom <- lapply(unif.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom.pnt.geom2 <- lapply(geom.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom2.pnt.geom2 <- lapply(geom2.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom3.pnt.geom <- lapply(geom3.res, function(x) {x[[2]][[1]]}) %>% unlist()
unif.pnt.geom2 <- lapply(unif.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom.pnt.geom <- lapply(geom.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom2.pnt.geom <- lapply(geom2.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom3.pnt.geom <- lapply(geom3.res, function(x) {x[[1]][[1]]}) %>% unlist()
unif.pnt.geom <- lapply(unif.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom.pnt.geom2 <- lapply(geom.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom2.pnt.geom2 <- lapply(geom2.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom3.pnt.geom2 <- lapply(geom3.res, function(x) {x[[2]][[1]]}) %>% unlist()
unif.pnt.geom2 <- lapply(unif.res, function(x) {x[[2]][[1]]}) %>% unlist()
mean(1/geom.pnt.geom) - 300
mean(1/geom2.pnt.geom) - 300
mean(1/geom3.pnt.geom) - 300
mean(1/unif.pnt.geom) - 300
mean(2/geom.pnt.geom2) - 300
mean(2/geom2.pnt.geom2) - 300
mean(2/geom3.pnt.geom2) - 300
mean(2/unif.pnt.geom2) - 300
# Load the necessary libraries
library(ggplot2)
library(dplyr)
calc_pmf_geom <- function(n, phi) {(1-phi)^(n-1)*phi}
calc_pmf_geom2 <- function(n, phi) {(n-1)*(1-phi)^(n-2)*phi^2}
calc_pmf_geom3 <- function(n, phi) {choose(n-1, 2)*(1-phi)^(n-3)*phi^3}
# Define the range of x values (number of failures)
x <- 0:1500  # Adjust this range if needed
# Calculate the PMF for negative binomial and geometric distributions
pmf_geom <- lapply(x, calc_pmf_geom, phi = 1/300) %>% unlist()
pmf_geom2 <- lapply(x, calc_pmf_geom2, phi = 1/150) %>% unlist()
pmf_geom3 <- lapply(x, calc_pmf_geom3, phi = 1/100) %>% unlist()
pmf_uniform <- ifelse(x >= 1 & x <= 599, 1 / 599, 0)
pmf_geom[1] <- 0
pmf_geom2[1] <- 0
pmf_geom2[2] <- 0
pmf_geom3[1] <- 0
pmf_geom3[2] <- 0
pmf_geom3[3] <- 0
# Create a data frame for plotting all distributions
data <- data.frame(x = x,
pmf_geom = pmf_geom,
pmf_geom2 = pmf_geom2,
pmf_geom3 = pmf_geom3,
pmf_uniform = pmf_uniform)
# Define a color blind-friendly palette
color_palette <- c("Geometric" = "#56B4E9",
"Sum of two geometric" = "#F0E442",
"Sum of three geometric" = "#E69F00",
"Uniform" = "#009E73")
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom3, color = "Sum of three geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "P(N=n)") +
scale_color_manual(values = color_palette, breaks = c("Geometric", "Sum of two geometric", "Sum of three geometric", "Uniform")) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
ggsave("figs/pmf.png", width = 7, height = 5)
# Plot the PMF using ggplot2
ggplot(data) +
geom_col(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom3, color = "Sum of three geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "P(N=n)") +
scale_color_manual(values = color_palette, breaks = c("Geometric", "Sum of two geometric", "Sum of three geometric", "Uniform")) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_point(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom3, color = "Sum of three geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "P(N=n)") +
scale_color_manual(values = color_palette, breaks = c("Geometric", "Sum of two geometric", "Sum of three geometric", "Uniform")) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
# Plot the PMF using ggplot2
ggplot(data) +
geom_line(aes(x = x, y = pmf_geom, color = "Geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom2, color = "Sum of two geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_geom3, color = "Sum of three geometric"), size = 1) +
geom_line(aes(x = x, y = pmf_uniform, color = "Uniform"), size = 1) +
labs(title = "Density of four distributions",
x = "n", y = "P(N=n)") +
scale_color_manual(values = color_palette, breaks = c("Geometric", "Sum of two geometric", "Sum of three geometric", "Uniform")) +
scale_x_continuous(limits = c(1, 1500), breaks = c(1, seq(250, 1500, by = 250))) +  # Start at 1 and set breaks
theme_minimal() +
theme(legend.title = element_blank())
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.pnt.AIC <- ifelse(geom.lik.geom < geom.lik.geom2, 1/geom.pnt.geom, 2/geom.pnt.geom2)
geom2.pnt.AIC <- ifelse(geom2.lik.geom < geom2.lik.geom2, 1/geom2.pnt.geom, 2/geom2.pnt.geom2)
geom3.pnt.AIC <- ifelse(geom3.lik.geom < geom3.lik.geom2, 1/geom3.pnt.geom, 2/geom3.pnt.geom2)
unif.pnt.AIC <- ifelse(unif.lik.geom < unif.lik.geom2, 1/unif.pnt.geom, 2/unif.pnt.geom2)
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.pnt.AIC <- ifelse(geom.lik.geom < geom.lik.geom2, 1/geom.pnt.geom, 2/geom.pnt.geom2)
geom2.pnt.AIC <- ifelse(geom2.lik.geom < geom2.lik.geom2, 1/geom2.pnt.geom, 2/geom2.pnt.geom2)
geom3.pnt.AIC <- ifelse(geom3.lik.geom < geom3.lik.geom2, 1/geom3.pnt.geom, 2/geom3.pnt.geom2)
unif.pnt.AIC <- ifelse(unif.lik.geom < unif.lik.geom2, 1/unif.pnt.geom, 2/unif.pnt.geom2)
mean(geom.pnt.AIC) - 300
mean(geom2.pnt.AIC) - 300
mean(geom3.pnt.AIC) - 300
mean(unif.pnt.AIC) - 300
sd(1/geom.pnt.geom)
geom.pnt.geom1/geom.pnt.geom
1/geom.pnt.geom
library(dplyr)
geom.res <- readRDS("res.sim.2M.1500.region.5000.geom.MAF.0.5.boot.keep.ends.rds")
geom2.res <- readRDS("res.sim.2M.1500.region.5000.geom2.MAF.0.5.boot.keep.ends.rds")
geom3.res <- readRDS("res.sim.2M.1500.region.5000.geom3.MAF.0.5.boot.keep.ends.rds")
unif.1.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.2.res <- readRDS("res.sim.2M.1500.region.5000.unif.MAF.0.5.boot.keep.ends.1.rds")
unif.res <- c(unif.1.res, unif.2.res)
geom.pnt.geom <- lapply(geom.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom2.pnt.geom <- lapply(geom2.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom3.pnt.geom <- lapply(geom3.res, function(x) {x[[1]][[1]]}) %>% unlist()
unif.pnt.geom <- lapply(unif.res, function(x) {x[[1]][[1]]}) %>% unlist()
geom.pnt.geom2 <- lapply(geom.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom2.pnt.geom2 <- lapply(geom2.res, function(x) {x[[2]][[1]]}) %>% unlist()
geom3.pnt.geom2 <- lapply(geom3.res, function(x) {x[[2]][[1]]}) %>% unlist()
unif.pnt.geom2 <- lapply(unif.res, function(x) {x[[2]][[1]]}) %>% unlist()
mean(1/geom.pnt.geom) - 300
mean(1/geom2.pnt.geom) - 300
mean(1/geom3.pnt.geom) - 300
mean(1/unif.pnt.geom) - 300
mean(2/geom.pnt.geom2) - 300
mean(2/geom2.pnt.geom2) - 300
mean(2/geom3.pnt.geom2) - 300
mean(2/unif.pnt.geom2) - 300
sd(1/geom.pnt.geom)
1/geom.pnt.geom
### geometric model
mean(1/geom.pnt.geom) - 300
mean(1/geom2.pnt.geom) - 300
mean(1/geom3.pnt.geom) - 300
mean(1/unif.pnt.geom) - 300
### geometric 2 model
mean(2/geom.pnt.geom2) - 300
mean(2/geom2.pnt.geom2) - 300
mean(2/geom3.pnt.geom2) - 300
mean(2/unif.pnt.geom2) - 300
### geometric model (sd)
sd(1/geom.pnt.geom)
### geometric model
mean(1/geom.pnt.geom) - 300
mean(1/geom2.pnt.geom) - 300
mean(1/geom3.pnt.geom) - 300
mean(1/unif.pnt.geom) - 300
### geometric 2 model
mean(2/geom.pnt.geom2) - 300
mean(2/geom2.pnt.geom2) - 300
mean(2/geom3.pnt.geom2) - 300
mean(2/unif.pnt.geom2) - 300
### geometric model
sd(1/geom.pnt.geom)
sd(1/geom2.pnt.geom)
sd(1/geom3.pnt.geom)
sd(1/unif.pnt.geom)
### geometric 2 model
sd(2/geom.pnt.geom2)
sd(2/geom2.pnt.geom2)
sd(2/geom3.pnt.geom2)
sd(2/unif.pnt.geom2)
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.pnt.AIC <- ifelse(geom.lik.geom < geom.lik.geom2, 1/geom.pnt.geom, 2/geom.pnt.geom2)
geom2.pnt.AIC <- ifelse(geom2.lik.geom < geom2.lik.geom2, 1/geom2.pnt.geom, 2/geom2.pnt.geom2)
geom3.pnt.AIC <- ifelse(geom3.lik.geom < geom3.lik.geom2, 1/geom3.pnt.geom, 2/geom3.pnt.geom2)
unif.pnt.AIC <- ifelse(unif.lik.geom < unif.lik.geom2, 1/unif.pnt.geom, 2/unif.pnt.geom2)
geom.lik.geom <- lapply(geom.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom2.lik.geom <- lapply(geom2.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom3.lik.geom <- lapply(geom3.res, function(x) {x[[1]][[2]]}) %>% unlist()
unif.lik.geom <- lapply(unif.res, function(x) {x[[1]][[2]]}) %>% unlist()
geom.lik.geom2 <- lapply(geom.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom2.lik.geom2 <- lapply(geom2.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom3.lik.geom2 <- lapply(geom3.res, function(x) {x[[2]][[2]]}) %>% unlist()
unif.lik.geom2 <- lapply(unif.res, function(x) {x[[2]][[2]]}) %>% unlist()
geom.pnt.AIC <- ifelse(geom.lik.geom < geom.lik.geom2, 1/geom.pnt.geom, 2/geom.pnt.geom2)
geom2.pnt.AIC <- ifelse(geom2.lik.geom < geom2.lik.geom2, 1/geom2.pnt.geom, 2/geom2.pnt.geom2)
geom3.pnt.AIC <- ifelse(geom3.lik.geom < geom3.lik.geom2, 1/geom3.pnt.geom, 2/geom3.pnt.geom2)
unif.pnt.AIC <- ifelse(unif.lik.geom < unif.lik.geom2, 1/unif.pnt.geom, 2/unif.pnt.geom2)
mean(geom.pnt.AIC) - 300
mean(geom2.pnt.AIC) - 300
mean(geom3.pnt.AIC) - 300
mean(unif.pnt.AIC) - 300
sd(geom.pnt.AIC)
sd(geom2.pnt.AIC)
sd(geom3.pnt.AIC)
sd(unif.pnt.AIC)
geom.boot <- lapply(geom.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom2.boot <- lapply(geom2.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom3.boot <- lapply(geom3.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
unif.boot <- lapply(unif.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom.boot <- lapply(geom.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom2.boot <- lapply(geom2.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom3.boot <- lapply(geom3.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
unif.boot <- lapply(unif.res, function(x) {x[[5]] %>% unlist() %>% matrix(byrow = TRUE, ncol = 2) %>% apply(2, function(x) quantile(x, probs = c(0.025, 0.975)))})
geom.coverage <- lapply(geom.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
geom2.coverage <- lapply(geom2.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
geom3.coverage <- lapply(geom3.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
unif.coverage <- lapply(unif.boot, function(x) {c(x[1,1] <= 300 & 300 <= x[2,1], x[1,2] <= 300 & 300 <= x[2,2])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
apply(geom.coverage, 2, mean)
apply(geom.coverage, 2, sum)
apply(geom2.coverage, 2, mean)
apply(geom2.coverage, 2, sum)
apply(geom3.coverage, 2, mean)
apply(geom3.coverage, 2, sum)
unif.coverage
negbinom.coverage
apply(geom.coverage, 2, mean)
apply(geom.coverage, 2, sum)
apply(geom2.coverage, 2, mean)
apply(geom2.coverage, 2, sum)
apply(geom3.coverage, 2, mean)
apply(geom3.coverage, 2, sum)
apply(unif.coverage, 2, mean)
apply(unif.coverage, 2, sum)
