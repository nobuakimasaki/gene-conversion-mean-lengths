---
title: "expected_counts"
author: "Nobuaki Masaki"
date: "5/1/2024"
output: html_document
---

```{r, include=FALSE}
library(dplyr)
source('../main_sim/fns_sim.R')

pL_geom_1M <- function(l, psi, phi, M) {
  if (l == 1) {return(phi*psi/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
  else {return(phi*(1-phi)^(l-1)*psi^2/(phi*psi + psi^2*(1 - phi - (1 - phi)^M)))}
}

get_exp_freq_1M <- function(psi, phi, M) {
  density <- lapply(1:1500, pL_geom_1M, psi, phi, M) %>% unlist()
  return(density)
}

get_exp_freq_2M <- function(psi, phi, M) {
  density <- lapply(2:1500, pL_geom_2M, psi, phi, M) %>% unlist()
  return(density)
}

sim.0.5 <- readRDS("../main_sim/res.sim.2M.1500.region.5000.ibdclust2cM.MAF.0.5.boot.keep.ends.rds")
tracts <- lapply(sim.0.5, function(x) {return(x[[3]])}) %>% unlist() %>% matrix(byrow = TRUE, ncol = 2)
psi <- lapply(sim.0.5, function(x){return(x[[4]])}) %>% unlist() 

sim.tracts <- readRDS("../sim_tracts/res.geom.rds")
sim.tracts.l <- lapply(sim.tracts, function(x) {return(x[[4]])}) %>% unlist()
sim.tracts.psi <- lapply(sim.tracts, function(x){return(x[[5]])}) %>% unlist() 
```

```{r}
### General outline for LD section

#1. expected CDF not equal to empirical CDF in main simulation
#2. empirical CDF in main simulation is equal to empirical CDF when simulating from the vcf file
#3. expected CDF is equal to empirical CDF when simulating tracts without LD
#4. truncated expected CDF is equal to truncated empirical CDF in main simulation
```

```{r}
#1

# expected CDF in main simulation
sim.exp.freq.1M <- lapply(psi, get_exp_freq_1M, 1/300, 1500)


sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
```

```{r}
#2

# expected CDF in main simulation
sim.exp.freq.1M <- lapply(psi, get_exp_freq_1M, 1/300, 1500)


sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
```

```{r}
#3

# expected CDF in main simulation
sim.exp.freq.1M <- lapply(psi, get_exp_freq_1M, 1/300, 1500)


sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
```

```{r}
#4

# expected CDF in main simulation
sim.exp.freq.1M <- lapply(psi, get_exp_freq_1M, 1/300, 1500)


sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())
```

```{r}
exp.freq.2M <- get_exp_freq_2M(1, 1/300, 1500) %>% as.data.frame()
```

```{r}
sim.tracts.exp.freq.1M <- lapply(sim.tracts.psi, get_exp_freq_1M, 1/300, 1500)
```

```{r}
sim.obs.cnts <- split(tracts, seq(nrow(tracts))) %>% lapply(function(x) {x[[2]] - x[[1]] + 1}) %>% as.data.frame() %>% t()
colnames(sim.obs.cnts) = "l"
sim.obs.cnts <- as.data.frame(sim.obs.cnts)
sim.obs.cnts.df <- sim.obs.cnts %>% group_by(l) %>% summarize(counts = n())

sim.tracts.obs.cnts <- sim.tracts.l %>% as.data.frame()
colnames(sim.tracts.obs.cnts) = "l"
sim.tracts.obs.cnts <- as.data.frame(sim.tracts.obs.cnts)
sim.tracts.obs.cnts.df <- sim.tracts.obs.cnts %>% group_by(l) %>% summarize(counts = n())
```

```{r}
exp.cnts <- readRDS("exp.cnts.rds")
exp.cnts.df <- cbind(1:1500, exp.cnts %>% as.data.frame())
obs.cnts <- readRDS("obs.cnts.rds")
obs.cnts.df <- obs.cnts %>% group_by(l) %>% summarize(counts = n())

colnames(obs.cnts.df) <- c("l", "counts")
colnames(exp.cnts.df) <- c("l", "counts")

### density at each observed tract length l
obs.cnts.df$freq <- obs.cnts.df$counts/sum(obs.cnts.df$counts)
exp.cnts.df$freq <- exp.cnts.df$counts/sum(exp.cnts.df$counts)

### density after truncating at 1
obs.cnts.df$freq.trunc <- obs.cnts.df$freq/(1-obs.cnts.df$freq[1])
obs.cnts.df$freq.trunc[1] <- 0
exp.cnts.df$freq.trunc <- exp.cnts.df$freq/(1-exp.cnts.df$freq[1])
exp.cnts.df$freq.trunc[1] <- 0
# exp.cnts.df.trunc <- exp.cnts.df[-1,]
# obs.cnts.trunc <- obs.cnts %>% filter(l != 1)

LD.cnts <- read.csv("../sim_vcf/sim_tracts_vcf_5000000.csv", header = FALSE) %>% filter(V1 >= 1 & V1 <= 1500)
# LD.trunc.cnts <- LD.cnts %>% filter(V1 >= 2 & V1 <= 1500)
LD.cnts.df <- LD.cnts %>% group_by(V1) %>% summarize(counts = n())
colnames(LD.cnts.df) <- c("l", "counts")
LD.cnts.df$freq <- LD.cnts.df$counts/sum(LD.cnts.df$counts)
LD.cnts.df$freq.trunc <- LD.cnts.df$freq/(1-LD.cnts.df$freq[1])
LD.cnts.df$freq.trunc[1] <- 0
```

```{r}
exp.cnts.df$cdf <- cumsum(exp.cnts.df$freq)
obs.cnts.df$cdf <- cumsum(obs.cnts.df$freq)

exp.cnts.df$cdf.trunc <- cumsum(exp.cnts.df$freq.trunc)
obs.cnts.df$cdf.trunc <- cumsum(obs.cnts.df$freq.trunc)

LD.cnts.df$cdf <- cumsum(LD.cnts.df$freq)
```


```{r}
### exp != emp sim
### exp trunc == emp sim trunc
p1 <- ggplot(obs.cnts.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = exp.cnts.df, color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1) + geom_text(aes(x = 50, y = 0.93), label = "F(l)", color = "#E41A1C", alpha = 0.5, size = 5) + geom_text(aes(x = 50, y = 0.77), label = expression(paste(widehat(F)^sim, (l))), color = "#000000", alpha = 0.5, size = 5) 

p2 <- ggplot(obs.cnts.df %>% filter(l > 1), aes(x = l, y = cdf.trunc)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = exp.cnts.df %>% filter(l > 1), color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(y = "") + 
  theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + geom_text(aes(x = 375, y = 0.65), label = expression(F[2](l)), color = "#E41A1C", alpha = 0.5, size = 5) + geom_text(aes(x = 375, y = 0.80), label = expression(paste(widehat(F)[2]^sim, (l))), color = "#000000", alpha = 0.5, size = 5)    
```

```{r}
p2
```

```{r}
p1.mod <- ggplot(obs.cnts.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = exp.cnts.df, color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(x = "Observed tract length", y = "Cumulative density") + theme(text = element_text(size=25), plot.title = element_text(hjust = 0.5)) + ylim(0, 1)

p2.mod <- ggplot(obs.cnts.df %>% filter(l > 1), aes(x = l, y = cdf.trunc)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = exp.cnts.df %>% filter(l > 1), color = "#E41A1C", size = 1, alpha = 0.5) + theme_bw() + labs(x = "Observed tract length", y = "") + 
  theme(text = element_text(size=25), plot.title = element_text(hjust = 0.5)) + geom_vline(xintercept = 2, linetype = "dashed") + geom_vline(xintercept = 1500, linetype = "dashed") + scale_x_continuous(breaks = c(2, 500, 1000, 1500))

grid <- arrangeGrob(p1.mod, p2.mod, ncol=2)
ggsave("LD.plot.present.png", grid, width=13, height=8)

p2.mod
ggsave("LD.plot.present2.png", p2.mod, width=13, height=8)
```


```{r}
### emp vcf == emp sim
p3 <- ggplot(obs.cnts.df, aes(x = l, y = cdf)) + geom_line(size = 1, alpha = 0.5) + geom_line(data = LD.cnts.df, color = "#377EB8", size = 1, alpha = 0.5) + theme_bw() + labs(y = "Cumulative density") + theme(text = element_text(size=22), plot.title = element_text(hjust = 0.5)) + ylim(0, 1) + geom_text(aes(x = 50, y = 0.85), label = expression(paste(widehat(F)^vcf, (l))), color = "#377EB8", alpha = 0.5, size = 5) + geom_text(aes(x = 50, y = 0.77), label = expression(paste(widehat(F)^sim, (l))), color = "#000000", alpha = 0.5, size = 5) 
```

```{r}
p3
```

```{r}
# Create a custom legend
legend_labels <- c("Empirical CDF from simulation study", "Expected CDF from model", "Empirical CDF from vcf file")
legend_colors <- c("#000000", "#E41A1C", "#377EB8")

# Create a data frame for the legend
legend_data <- data.frame(
  x = rep(1, length(legend_labels)),
  y = seq_along(legend_labels),
  label = legend_labels,
  color = legend_colors
)

legend_data$label <- factor(legend_data$label, levels = c("Empirical CDF from simulation study", "Expected CDF from model", "Empirical CDF from vcf file"))
legend_data$color <- factor(legend_data$color, levels = c("#000000", "#E41A1C", "#377EB8"))

# Create a blank plot for the custom legend
legend_plot <- ggplot(legend_data, aes(x = x, y = y)) +
  geom_point(aes(color = color), size = 5) + theme_bw() +
  scale_color_manual(labels = c("Empirical CDF from simulation study", "Expected CDF from model", "Empirical CDF from vcf file"), values = c("#000000", "#E41A1C", "#377EB8")) + 
  theme(legend.title = element_blank(), 
        legend.background = element_rect(color = "black", size = 0.5),  # Add a box around the legend
        legend.key = element_rect(fill = "white", color = "black"), text = element_text(size=20))     # Add a border to legend keys)
  
legend <- get_legend(legend_plot)
```

```{r}
legend
```


```{r}
grid <- arrangeGrob(p1, p2, ncol=2)
ggsave("LD.plot.2.png", grid, width=13, height=8)
```




